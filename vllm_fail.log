DEBUG 08-15 03:11:35 [__init__.py:30] No plugins for group vllm.platform_plugins found.
DEBUG 08-15 03:11:35 [__init__.py:35] Checking if TPU platform is available.
DEBUG 08-15 03:11:35 [__init__.py:45] TPU platform is not available because: No module named 'libtpu'
DEBUG 08-15 03:11:35 [__init__.py:52] Checking if CUDA platform is available.
DEBUG 08-15 03:11:35 [__init__.py:72] Confirmed CUDA platform is available.
DEBUG 08-15 03:11:35 [__init__.py:100] Checking if ROCm platform is available.
DEBUG 08-15 03:11:35 [__init__.py:114] ROCm platform is not available because: No module named 'amdsmi'
DEBUG 08-15 03:11:35 [__init__.py:121] Checking if XPU platform is available.
DEBUG 08-15 03:11:35 [__init__.py:140] XPU platform is not available because: No module named 'intel_extension_for_pytorch'
DEBUG 08-15 03:11:35 [__init__.py:147] Checking if CPU platform is available.
DEBUG 08-15 03:11:35 [__init__.py:169] Checking if Neuron platform is available.
DEBUG 08-15 03:11:35 [__init__.py:52] Checking if CUDA platform is available.
DEBUG 08-15 03:11:35 [__init__.py:72] Confirmed CUDA platform is available.
INFO 08-15 03:11:35 [__init__.py:235] Automatically detected platform cuda.
DEBUG 08-15 03:11:37 [utils.py:164] Setting VLLM_WORKER_MULTIPROC_METHOD to 'spawn'
DEBUG 08-15 03:11:37 [__init__.py:38] Available plugins for group vllm.general_plugins:
DEBUG 08-15 03:11:37 [__init__.py:40] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
DEBUG 08-15 03:11:37 [__init__.py:43] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
INFO 08-15 03:11:38 [api_server.py:1755] vLLM API server version 0.10.0
INFO 08-15 03:11:38 [cli_args.py:261] non-default args: {'host': '0.0.0.0', 'port': 8001, 'model': 'TinyLlama/TinyLlama-1.1B-Chat-v1.0', 'gpu_memory_utilization': 0.85}
DEBUG 08-15 03:11:45 [config.py:579] Tasks supported by runner type: {'generate': ['generate'], 'pooling': ['encode', 'embed'], 'draft': ['draft']}
DEBUG 08-15 03:11:45 [config.py:586] Selected runner type: generate
INFO 08-15 03:11:45 [config.py:1604] Using max model len 2048
DEBUG 08-15 03:11:45 [arg_utils.py:1648] Setting max_num_batched_tokens to 2048 for OPENAI_API_SERVER usage context.
DEBUG 08-15 03:11:45 [arg_utils.py:1656] Setting max_num_seqs to 256 for OPENAI_API_SERVER usage context.
INFO 08-15 03:11:46 [config.py:2434] Chunked prefill is enabled with max_num_batched_tokens=2048.
DEBUG 08-15 03:11:50 [__init__.py:30] No plugins for group vllm.platform_plugins found.
DEBUG 08-15 03:11:50 [__init__.py:35] Checking if TPU platform is available.
DEBUG 08-15 03:11:50 [__init__.py:45] TPU platform is not available because: No module named 'libtpu'
DEBUG 08-15 03:11:50 [__init__.py:52] Checking if CUDA platform is available.
DEBUG 08-15 03:11:50 [__init__.py:72] Confirmed CUDA platform is available.
DEBUG 08-15 03:11:50 [__init__.py:100] Checking if ROCm platform is available.
DEBUG 08-15 03:11:50 [__init__.py:114] ROCm platform is not available because: No module named 'amdsmi'
DEBUG 08-15 03:11:50 [__init__.py:121] Checking if XPU platform is available.
DEBUG 08-15 03:11:50 [__init__.py:140] XPU platform is not available because: No module named 'intel_extension_for_pytorch'
DEBUG 08-15 03:11:50 [__init__.py:147] Checking if CPU platform is available.
DEBUG 08-15 03:11:50 [__init__.py:169] Checking if Neuron platform is available.
DEBUG 08-15 03:11:50 [__init__.py:52] Checking if CUDA platform is available.
DEBUG 08-15 03:11:50 [__init__.py:72] Confirmed CUDA platform is available.
INFO 08-15 03:11:50 [__init__.py:235] Automatically detected platform cuda.
INFO 08-15 03:11:52 [core.py:572] Waiting for init message from front-end.
DEBUG 08-15 03:11:52 [utils.py:822] HELLO from local core engine process 0.
DEBUG 08-15 03:11:52 [core.py:580] Received init message: EngineHandshakeMetadata(addresses=EngineZmqAddresses(inputs=['ipc:///tmp/a6297446-996c-4fa6-bccb-7034b1486567'], outputs=['ipc:///tmp/3c122fc5-f1d0-4cfa-8d90-7c60dbea3301'], coordinator_input=None, coordinator_output=None, frontend_stats_publish_address=None), parallel_config={'data_parallel_master_ip': '127.0.0.1', 'data_parallel_master_port': 0, 'data_parallel_size': 1})
DEBUG 08-15 03:11:52 [__init__.py:38] Available plugins for group vllm.general_plugins:
DEBUG 08-15 03:11:52 [__init__.py:40] - lora_filesystem_resolver -> vllm.plugins.lora_resolvers.filesystem_resolver:register_filesystem_resolver
DEBUG 08-15 03:11:52 [__init__.py:43] All plugins in this group will be loaded. Set `VLLM_PLUGINS` to control which plugins to load.
INFO 08-15 03:11:52 [core.py:71] Initializing a V1 LLM engine (v0.10.0) with config: model='TinyLlama/TinyLlama-1.1B-Chat-v1.0', speculative_config=None, tokenizer='TinyLlama/TinyLlama-1.1B-Chat-v1.0', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=2048, download_dir=None, load_format=auto, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=TinyLlama/TinyLlama-1.1B-Chat-v1.0, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output","vllm.mamba_mixer2"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":512,"local_cache_dir":null}
ERROR 08-15 03:11:52 [core.py:632] EngineCore failed to start.
ERROR 08-15 03:11:52 [core.py:632] Traceback (most recent call last):
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 623, in run_engine_core
ERROR 08-15 03:11:52 [core.py:632]     engine_core = EngineCoreProc(*args, **kwargs)
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 441, in __init__
ERROR 08-15 03:11:52 [core.py:632]     super().__init__(vllm_config, executor_class, log_stats,
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 77, in __init__
ERROR 08-15 03:11:52 [core.py:632]     self.model_executor = executor_class(vllm_config)
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/executor_base.py", line 53, in __init__
ERROR 08-15 03:11:52 [core.py:632]     self._init_executor()
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/uniproc_executor.py", line 47, in _init_executor
ERROR 08-15 03:11:52 [core.py:632]     self.collective_rpc("init_worker", args=([kwargs], ))
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/uniproc_executor.py", line 58, in collective_rpc
ERROR 08-15 03:11:52 [core.py:632]     answer = run_method(self.driver_worker, method, args, kwargs)
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/utils/__init__.py", line 2985, in run_method
ERROR 08-15 03:11:52 [core.py:632]     return func(*args, **kwargs)
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/worker/worker_base.py", line 556, in init_worker
ERROR 08-15 03:11:52 [core.py:632]     worker_class = resolve_obj_by_qualname(
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/utils/__init__.py", line 2539, in resolve_obj_by_qualname
ERROR 08-15 03:11:52 [core.py:632]     module = importlib.import_module(module_name)
ERROR 08-15 03:11:52 [core.py:632]   File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
ERROR 08-15 03:11:52 [core.py:632]     return _bootstrap._gcd_import(name[level:], package, level)
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap_external>", line 883, in exec_module
ERROR 08-15 03:11:52 [core.py:632]   File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/worker/gpu_worker.py", line 33, in <module>
ERROR 08-15 03:11:52 [core.py:632]     from vllm.v1.worker.gpu_model_runner import GPUModelRunner
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/worker/gpu_model_runner.py", line 33, in <module>
ERROR 08-15 03:11:52 [core.py:632]     from vllm.model_executor.layers.mamba.mamba_mixer2 import MambaBase
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/mamba_mixer2.py", line 29, in <module>
ERROR 08-15 03:11:52 [core.py:632]     from vllm.model_executor.layers.mamba.ops.ssd_combined import (
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/ops/ssd_combined.py", line 15, in <module>
ERROR 08-15 03:11:52 [core.py:632]     from .ssd_bmm import _bmm_chunk_fwd
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/ops/ssd_bmm.py", line 94, in <module>
ERROR 08-15 03:11:52 [core.py:632]     def _bmm_chunk_fwd_kernel(
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/autotuner.py", line 378, in decorator
ERROR 08-15 03:11:52 [core.py:632]     return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, restore_value, pre_hook=pre_hook,
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/autotuner.py", line 130, in __init__
ERROR 08-15 03:11:52 [core.py:632]     self.do_bench = driver.active.get_benchmarker()
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 23, in __getattr__
ERROR 08-15 03:11:52 [core.py:632]     self._initialize_obj()
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 20, in _initialize_obj
ERROR 08-15 03:11:52 [core.py:632]     self._obj = self._init_fn()
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 9, in _create_driver
ERROR 08-15 03:11:52 [core.py:632]     return actives[0]()
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 535, in __init__
ERROR 08-15 03:11:52 [core.py:632]     self.utils = CudaUtils()  # TODO: make static
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 89, in __init__
ERROR 08-15 03:11:52 [core.py:632]     mod = compile_module_from_src(Path(os.path.join(dirname, "driver.c")).read_text(), "cuda_utils")
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 66, in compile_module_from_src
ERROR 08-15 03:11:52 [core.py:632]     so = _build(name, src_path, tmpdir, library_dirs(), include_dir, libraries)
ERROR 08-15 03:11:52 [core.py:632]   File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/build.py", line 18, in _build
ERROR 08-15 03:11:52 [core.py:632]     raise RuntimeError("Failed to find C compiler. Please specify via CC environment variable.")
ERROR 08-15 03:11:52 [core.py:632] RuntimeError: Failed to find C compiler. Please specify via CC environment variable.
Process EngineCore_0:
Traceback (most recent call last):
  File "/usr/lib/python3.10/multiprocessing/process.py", line 314, in _bootstrap
    self.run()
  File "/usr/lib/python3.10/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 636, in run_engine_core
    raise e
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 623, in run_engine_core
    engine_core = EngineCoreProc(*args, **kwargs)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 441, in __init__
    super().__init__(vllm_config, executor_class, log_stats,
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core.py", line 77, in __init__
    self.model_executor = executor_class(vllm_config)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/executor_base.py", line 53, in __init__
    self._init_executor()
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/uniproc_executor.py", line 47, in _init_executor
    self.collective_rpc("init_worker", args=([kwargs], ))
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/executor/uniproc_executor.py", line 58, in collective_rpc
    answer = run_method(self.driver_worker, method, args, kwargs)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/utils/__init__.py", line 2985, in run_method
    return func(*args, **kwargs)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/worker/worker_base.py", line 556, in init_worker
    worker_class = resolve_obj_by_qualname(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/utils/__init__.py", line 2539, in resolve_obj_by_qualname
    module = importlib.import_module(module_name)
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/worker/gpu_worker.py", line 33, in <module>
    from vllm.v1.worker.gpu_model_runner import GPUModelRunner
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/worker/gpu_model_runner.py", line 33, in <module>
    from vllm.model_executor.layers.mamba.mamba_mixer2 import MambaBase
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/mamba_mixer2.py", line 29, in <module>
    from vllm.model_executor.layers.mamba.ops.ssd_combined import (
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/ops/ssd_combined.py", line 15, in <module>
    from .ssd_bmm import _bmm_chunk_fwd
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/model_executor/layers/mamba/ops/ssd_bmm.py", line 94, in <module>
    def _bmm_chunk_fwd_kernel(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/autotuner.py", line 378, in decorator
    return Autotuner(fn, fn.arg_names, configs, key, reset_to_zero, restore_value, pre_hook=pre_hook,
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/autotuner.py", line 130, in __init__
    self.do_bench = driver.active.get_benchmarker()
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 23, in __getattr__
    self._initialize_obj()
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 20, in _initialize_obj
    self._obj = self._init_fn()
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/driver.py", line 9, in _create_driver
    return actives[0]()
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 535, in __init__
    self.utils = CudaUtils()  # TODO: make static
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 89, in __init__
    mod = compile_module_from_src(Path(os.path.join(dirname, "driver.c")).read_text(), "cuda_utils")
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/backends/nvidia/driver.py", line 66, in compile_module_from_src
    so = _build(name, src_path, tmpdir, library_dirs(), include_dir, libraries)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/triton/runtime/build.py", line 18, in _build
    raise RuntimeError("Failed to find C compiler. Please specify via CC environment variable.")
RuntimeError: Failed to find C compiler. Please specify via CC environment variable.
Traceback (most recent call last):
  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/entrypoints/openai/api_server.py", line 1856, in <module>
    uvloop.run(run_server(args))
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/uvloop/__init__.py", line 82, in run
    return loop.run_until_complete(wrapper())
  File "uvloop/loop.pyx", line 1518, in uvloop.loop.Loop.run_until_complete
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/uvloop/__init__.py", line 61, in wrapper
    return await main
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/entrypoints/openai/api_server.py", line 1791, in run_server
    await run_server_worker(listen_address, sock, args, **uvicorn_kwargs)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/entrypoints/openai/api_server.py", line 1811, in run_server_worker
    async with build_async_engine_client(args, client_config) as engine_client:
  File "/usr/lib/python3.10/contextlib.py", line 199, in __aenter__
    return await anext(self.gen)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/entrypoints/openai/api_server.py", line 158, in build_async_engine_client
    async with build_async_engine_client_from_engine_args(
  File "/usr/lib/python3.10/contextlib.py", line 199, in __aenter__
    return await anext(self.gen)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/entrypoints/openai/api_server.py", line 194, in build_async_engine_client_from_engine_args
    async_llm = AsyncLLM.from_vllm_config(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/async_llm.py", line 163, in from_vllm_config
    return cls(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/async_llm.py", line 117, in __init__
    self.engine_core = EngineCoreClient.make_async_mp_client(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 98, in make_async_mp_client
    return AsyncMPClient(*client_args)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 677, in __init__
    super().__init__(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/core_client.py", line 408, in __init__
    with launch_core_engines(vllm_config, executor_class,
  File "/usr/lib/python3.10/contextlib.py", line 142, in __exit__
    next(self.gen)
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/utils.py", line 697, in launch_core_engines
    wait_for_engine_startup(
  File "/home/david/stanford-demo/.venv/lib/python3.10/site-packages/vllm/v1/engine/utils.py", line 750, in wait_for_engine_startup
    raise RuntimeError("Engine core initialization failed. "
RuntimeError: Engine core initialization failed. See root cause above. Failed core proc(s): {}
